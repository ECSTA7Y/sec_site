classtm+clpre+revitm+know+subject+drsmok+
commhr+schcsrm+comno+buget+eduqua+teainc+
schtype+fight+brkpb+smok+drink
ceps1 = build_design_matrix(ceps,formula1)
test1 = build_design_matrix(test,formula1)
View(test1)
library(readr)
library(dplyr)
ceps = read_csv("C:/Users/xsong/Desktop/table/ceps_train.csv")
test = read_csv("C:/Users/xsong/Desktop/table/ceps_test.csv")
ceps = ceps %>% mutate(stdmat=replace(stdmat,stdmat>100,100), # 去除极端值
stdmat=replace(stdmat,stdmat<40,40),
grade9=as.character(grade9))
test = test %>% mutate(stdmat=replace(stdmat,stdmat>100,100),
stdmat=replace(stdmat,stdmat<40,40),
grade9=as.character(grade9))
######################################################################
# 下面的操作构建design matrix。具体将连续变量列标准化。将字符变量列虚拟化
##################################################################
build_design_matrix = function(x,equalfor){
`select` = dplyr::`select`
cont1 = apply(x ,2,as.numeric)
numcols = cont1[,colSums(cont1,na.rm = T) != 0] # 判断连续变量
chrcols = cont1[,colSums(cont1,na.rm = T) == 0] # 判断字符变量
numcols = as.data.frame(numcols) # 连续变量列
numcols = select(numcols,-stdmat) # 连续变量列
chrcols = x[,colnames(chrcols)] # 字符变量
numcols = scale(numcols,center = T,scale = T) #标准化数据,只标准连续变量
dt = cbind(numcols,chrcols) #按列合并数据
stdmat = x[,'stdmat']
dt = cbind(dt,stdmat)
dt = model.matrix(equalfor,dt)[,-1] # 删除截距列
dt = cbind(dt,stdmat)
dt = as.data.frame(dt)
return(dt)
}
formula1 = stdmat ~ grade9+sex+onechi+drunk+qurel+
relation+desk+net+maedu+faedu+eduexp+
dialect+chmwk+chcos+qianzi+futcfd+dial+
chidia+eduyexp+huko+eduy+dangy+houspro+
classtm+clpre+revitm+know+subject+drsmok+
commhr+schcsrm+comno+buget+eduqua+teainc+
schtype+fight+brkpb+smok+drink
ceps1 = build_design_matrix(ceps,formula1)
test1 = build_design_matrix(test,formula1)
View(test1)
View(ceps)
test1 = apply(test,2,as.numeric)
View(test1)
?ifelse
library(readr)
library(dplyr)
ceps = read_csv("C:/Users/xsong/Desktop/table/ceps_train.csv")
test = read_csv("C:/Users/xsong/Desktop/table/ceps_test.csv")
ceps = ceps %>% mutate(stdmat=replace(stdmat,stdmat>100,100), # 去除极端值
stdmat=replace(stdmat,stdmat<40,40),
grade9=ifelse(grade9=='1','yes','no'))
test = test %>% mutate(stdmat=replace(stdmat,stdmat>100,100),
stdmat=replace(stdmat,stdmat<40,40),
grade9=ifelse(grade9=='1','yes','no'))
build_design_matrix = function(x,equalfor){
`select` = dplyr::`select`
cont1 = apply(x ,2,as.numeric)
numcols = cont1[,colSums(cont1,na.rm = T) != 0] # 判断连续变量
chrcols = cont1[,colSums(cont1,na.rm = T) == 0] # 判断字符变量
numcols = as.data.frame(numcols) # 连续变量列
numcols = select(numcols,-stdmat) # 连续变量列
chrcols = x[,colnames(chrcols)] # 字符变量
numcols = scale(numcols,center = T,scale = T) #标准化数据,只标准连续变量
dt = cbind(numcols,chrcols) #按列合并数据
stdmat = x[,'stdmat']
dt = cbind(dt,stdmat)
dt = model.matrix(equalfor,dt)[,-1] # 删除截距列
dt = cbind(dt,stdmat)
dt = as.data.frame(dt)
return(dt)
}
formula1 = stdmat ~ grade9+sex+onechi+drunk+qurel+
relation+desk+net+maedu+faedu+eduexp+
dialect+chmwk+chcos+qianzi+futcfd+dial+
chidia+eduyexp+huko+eduy+dangy+houspro+
classtm+clpre+revitm+know+subject+drsmok+
commhr+schcsrm+comno+buget+eduqua+teainc+
schtype+fight+brkpb+smok+drink
ceps1 = build_design_matrix(ceps,formula1)
test1 = build_design_matrix(test,formula1)
View(ceps1)
View(test1)
knitr::opts_chunk$set(comment='#',error=T,message = F,warning = F,fig.align='center',out.width ='90%')
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
require(data.table)
require(ggplot2)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
table(test[,LotShape])
test[LotShape =='IR2' | LotShape =='IR3',LotShape:='IR1']
table(test[,LotShape])
table(test[,MSSubClass])
table(train[,LotFrontage])
summary(train[,LotFrontage])
table(train[,MSSubClass])
table(test[,MSZoning])
table(train[,MSZoning])
train[MSZoning !='RL',MSZoning:='RM']
test[MSZoning !='RL',MSZoning:='RM']
#MSZoning
table(test[,MSZoning])
table(train[,MSZoning])
#MSZoning
table(test[,LandContour])
table(train[,LandContour])
train[LandContour !='Lvl',LandContour:='oth']
test[LandContour !='Lvl',LandContour:='oth']
table(test[,LandContour])
table(train[,LandContour])
table(test[,LotConfig])
table(train[,LotConfig])
train[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
test[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
table(test[,LotConfig])
table(train[,LotConfig])
table(test[,LandSlope])
table(train[,LandSlope])
train[LandSlope !='Gtl',LandSlope:='oth']
test[LandSlope !='Gtl',LandSlope:='oth']
table(test[,LandSlope])
table(train[,LandSlope])
table(test[,Neighborhood])
table(train[,Neighborhood])
summary(train[,Neighborhood])
table(test[,Condition1])
table(train[,Condition1])
train[Condition1 !='Norm',Condition1:='oth']
test[Condition1 !='Norm',Condition1:='oth']
#
table(test[,Condition1])
table(train[,Condition1])
table(test[,BldgType])
table(train[,BldgType])
knitr::opts_chunk$set(comment='#',error=T,message = F,warning = F,fig.align='center',out.width ='90%')
require(data.table)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
table(test[,BsmtExposure],useNA ="always")
table(train[,BsmtExposure],useNA ="always")
train[is.na(BsmtExposure),BsmtQual:='No']
test[is.na(BsmtExposure),BsmtQual:='No']
table(test[,BsmtExposure],useNA ="always")
table(train[,BsmtExposure],useNA ="always")
train[is.na(BsmtExposure),BsmtExposure:='No']
test[is.na(BsmtExposure),BsmtExposure:='No']
table(test[,BsmtExposure],useNA ="always")
table(train[,BsmtExposure],useNA ="always")
table(train[,BsmtCond],useNA ="always")
table(test[,BsmtCond],useNA ="always")
train[is.na(BsmtCond),BsmtCond:='TA']
test[is.na(BsmtCond),BsmtCond:='TA']
train[BsmtCond=='Po',BsmtCond:='Fa']
test[BsmtCond=='Po',BsmtCond:='Fa']
table(train[,BsmtCond],useNA ="always")
table(test[,BsmtCond],useNA ="always")
table(train[,BsmtFinType1],useNA ="always")
table(test[,BsmtFinType1],useNA ="always")
plot(table(test[,BsmtFinType1],useNA ="always"))
train[is.na(BsmtFinType1),BsmtFinType1:='No']
test[is.na(BsmtFinType1),BsmtFinType1:='No']
table(train[,BsmtFinType1],useNA ="always")
table(test[,BsmtFinType1],useNA ="always")
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
train[is.na(BsmtFinType1),BsmtFinType1:='Unf']
test[is.na(BsmtFinType1),BsmtFinType1:='Unf']
table(train[,BsmtFinType1],useNA ="always")
table(test[,BsmtFinType1],useNA ="always")
table(train[,BsmtFinSF1],useNA ="always")
table(test[,BsmtFinSF1],useNA ="always")
summary(train[,BsmtFinSF1])
summary(test[,BsmtFinSF1])
sm = summary(train[,BsmtFinSF1])
sm
View
View(summary(train[,BsmtFinSF1]))
View(sm)
quantile(test[,BsmtFinType1],0.75)
quantile(test[,BsmtFinSF1],0.75)
quantile(test[,BsmtFinSF1],0.75,na.rm=T)
train[is.na(BsmtFinSF1),BsmtFinSF1:=443.6]
test[is.na(BsmtFinSF1),BsmtFinSF1:=439.2]
t1 = quantile(train[,BsmtFinSF1],0.75,na.rm=T)
t2 = quantile(test[,BsmtFinSF1],0.75,na.rm=T)
train[BsmtFinSF1>t1,BsmtFinSF1:=443.6]
test[BsmtFinSF1>t2,BsmtFinSF1:=439.2]
summary(test[,BsmtFinSF1])
hist(test[,BsmtFinSF1])
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
train[is.na(BsmtFinSF1),BsmtFinSF1:=443.6]
test[is.na(BsmtFinSF1),BsmtFinSF1:=439.2]
t1 = quantile(train[,BsmtFinSF1],0.75,na.rm=T)
t2 = quantile(test[,BsmtFinSF1],0.75,na.rm=T)
train[BsmtFinSF1>t1,BsmtFinSF1:=t1]
test[BsmtFinSF1>t2,BsmtFinSF1:=t2]
hist(test[,BsmtFinSF1])
hist(train[,BsmtFinSF1])
table(train[,BsmtFinType2],useNA ="always")
table(test[,BsmtFinType2],useNA ="always")
train[is.na(BsmtFinType2),BsmtFinType2:='Unf']
test[is.na(BsmtFinType2),BsmtFinType2:='Unf']
table(train[,BsmtFinType2],useNA ="always")
table(test[,BsmtFinType2],useNA ="always")
train[is.na(MasVnrArea),MasVnrArea:= mean(MasVnrArea,na.rm = T)]
train[,MasVnrArea]
train[is.na(MasVnrArea),MasVnrArea:= mean(MasVnrArea,na.rm = T)]
train[,MasVnrArea]
summary(train[,BsmtUnfSF])
summary(test[,BsmtUnfSF])
train[is.na(BsmtUnfSF),BsmtUnfSF:=mean(train[,BsmtUnfSF],na.rm = T)]
test[is.na(BsmtUnfSF),BsmtUnfSF:=mean(test[,BsmtUnfSF],na.rm = T)]
fillna_correct = function(df,var){
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var> q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
train[,TotalBsmtSF]
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
vec = df[,var]
avg = mean(vec,na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct(train,'TotalBsmtSF')
fillna_correct = function(df,var){
avg = mean(df[,..var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,..var],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[,..var],na.rm = T)
df[is.na(var),..var:=avg]
q3 = quantile(df[,..var],0.75,na.rm=T)
df[var > q3,..var:=q3]
}
fillna_correct(train,TotalBsmtSF)
?`[`
library(data.table)
?`[`
`[` = data.table::`[`
fillna_correct = function(df,var){
avg = mean(df$var,na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df$var,0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
train[,'TotalBsmtSF']
ccc =
fillna_correct = function(df,var){
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
return(df)
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
return(df)
}
train = fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[,.(var)],na.rm = T)
df[is.na(var),.(var):=avg]
q3 = quantile(df[,.(var)],0.75,na.rm=T)
df[var > q3,.(var):=q3]
}
train = fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
options(datatable.WhenJisSymbolThenCallingScope=TRUE)
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
options(datatable.WhenJisSymbolThenCallingScope=TRUE)
fillna_correct = function(df,var){
avg = mean(df[,var],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[,var],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[,var, with=T],na.rm = T)
df[is.na(var),var:=avg, with=T]
q3 = quantile(df[,var, with=T],0.75,na.rm=T)
df[var > q3,var:=q3, with=T]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[[var]],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[[var]],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = avg, value = mean(df[[var]], na.rm=T))
set(df, i = which(df[[var]]>quantile(df[[var]],0.75,na.rm=T), j = avg, value = quantile(df[[var]],0.75,na.rm=T)))
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = df[[var]], value = mean(df[[var]], na.rm=T))
set(df, i = which(df[[var]]>quantile(df[[var]],0.75,na.rm=T), j = df[[var]], value = quantile(df[[var]],0.75,na.rm=T)))
}
fillna_correct(train,TotalBsmtSF)
?set
fillna_correct = function(df,var){
set(df, i = which(is.na(var)), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
fillna_correct = function(df,var){
set(df, i = which(is.na(var)), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
train[,'TotalBsmtSF']
train[,TotalBsmtSF]
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
DT
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,a)
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,a)
df[,a]
DT[,a]
DT[,.(a)]
mean(DT[,.(a)])
fillna = function(df){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
df
}
fillna(DT,a)
DT = data.table(a=1:3, b=4:6)
myCols = "b"
DT[,myCols,with=T]
options(datatable.WhenJisSymbolThenCallingScope=TRUE)
DT[,myCols,with=T]
library(data.table)
DT <- data.table(
V1=rep(letters[1:3],5),
V2=c(2:16)
)
Test1 <- DT[,.((V2-sd(V2))/(max(V2)-min(V2))), by=.(V1)] # for comparision
Norma <- function(dataset, Vari, group_by){
dataset[,
.((get(Vari)-sd(get(Vari)))/(max(get(Vari))-min(get(Vari)))),
by=.(get(group_by))
]
}
Test2 <- Norma(DT,"V2","V1")
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(test[[var]],na.rm = T)]
}
fillna(DT,a)
library(data.table)
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(test[[var]],na.rm = T)]
}
fillna(DT,a)
DT
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(df[[var]],na.rm = T)]
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(df[[var]],na.rm = T)]
df
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=1,na.rm = T)]
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,'a')
get('a')
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,'a')
fillna = function(df,var){
df[is.na(get(var)),var:=mean(df[[var]],na.rm = T)]
df
}
fillna(DT,a)
fillna1 = function(df,var){
df[is.na(get(var)),var:=mean(df[[var]],na.rm = T)]
df
}
fillna1(DT,a)
fillna1 = function(df){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
df
}
fillna1(DT,a)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
return(df)
}
fillna(DT,'a')
DT
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,'a')
fillna = function(df,var){
+   col = df[[var]]
+   set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
+ }
?se
?set
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
}
fillna(DT,'a')
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
}
fillna_correct(train,'TotalBsmtSF')
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
return(df)
}
fillna_correct(train,'TotalBsmtSF')
substitute(var)
as.character(substitute(var))
setwd('F:/sec_site')
blogdown:::serve_site()
setwd('F:/sec_site')
blogdown:::serve_site()
setwd('F:/sec_site')
blogdown:::serve_site()
