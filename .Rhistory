df[var > q3,var:=q3, with=T]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
avg = mean(df[[var]],na.rm = T)
df[is.na(var),var:=avg]
q3 = quantile(df[[var]],0.75,na.rm=T)
df[var > q3,var:=q3]
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = avg, value = mean(df[[var]], na.rm=T))
set(df, i = which(df[[var]]>quantile(df[[var]],0.75,na.rm=T), j = avg, value = quantile(df[[var]],0.75,na.rm=T)))
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = df[[var]], value = mean(df[[var]], na.rm=T))
set(df, i = which(df[[var]]>quantile(df[[var]],0.75,na.rm=T), j = df[[var]], value = quantile(df[[var]],0.75,na.rm=T)))
}
fillna_correct(train,TotalBsmtSF)
?set
fillna_correct = function(df,var){
set(df, i = which(is.na(var)), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
fillna_correct = function(df,var){
set(df, i = which(is.na(var)), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
train[,'TotalBsmtSF']
train[,TotalBsmtSF]
fillna_correct = function(df,var){
set(df, i = which(is.na(df[[var]])), j = var, value = mean(df[[var]], na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna_correct(train,TotalBsmtSF)
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
DT
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,a)
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,a)
df[,a]
DT[,a]
DT[,.(a)]
mean(DT[,.(a)])
fillna = function(df){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
df
}
fillna(DT,a)
DT = data.table(a=1:3, b=4:6)
myCols = "b"
DT[,myCols,with=T]
options(datatable.WhenJisSymbolThenCallingScope=TRUE)
DT[,myCols,with=T]
library(data.table)
DT <- data.table(
V1=rep(letters[1:3],5),
V2=c(2:16)
)
Test1 <- DT[,.((V2-sd(V2))/(max(V2)-min(V2))), by=.(V1)] # for comparision
Norma <- function(dataset, Vari, group_by){
dataset[,
.((get(Vari)-sd(get(Vari)))/(max(get(Vari))-min(get(Vari)))),
by=.(get(group_by))
]
}
Test2 <- Norma(DT,"V2","V1")
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(test[[var]],na.rm = T)]
}
fillna(DT,a)
library(data.table)
DT = data.table(a = c(6,3,1,9,NA), b = 4:8)
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(test[[var]],na.rm = T)]
}
fillna(DT,a)
DT
DT
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(df[[var]],na.rm = T)]
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=mean(df[[var]],na.rm = T)]
df
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=1,na.rm = T)]
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,a)
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,'a')
get('a')
fillna = function(df,var){
df[is.na(get(var)),get(var):=1]
df
}
fillna(DT,'a')
fillna = function(df,var){
df[is.na(get(var)),var:=mean(df[[var]],na.rm = T)]
df
}
fillna(DT,a)
fillna1 = function(df,var){
df[is.na(get(var)),var:=mean(df[[var]],na.rm = T)]
df
}
fillna1(DT,a)
fillna1 = function(df){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
df
}
fillna1(DT,a)
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
return(df)
}
fillna(DT,'a')
DT
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
}
fillna(DT,'a')
fillna = function(df,var){
+   col = df[[var]]
+   set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
+ }
?se
?set
fillna = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
}
fillna(DT,'a')
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
}
fillna_correct(train,'TotalBsmtSF')
fillna_correct = function(df,var){
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,0.75,na.rm=T)
set(df,i = which(col>q3),j = var,
value = q3)
return(df)
}
fillna_correct(train,'TotalBsmtSF')
substitute(var)
as.character(substitute(var))
install.packages(c("actuar", "AER", "BH", "bibtex", "bookdown", "broom", "callr", "car", "carData", "caret", "covr", "cubature", "curl", "data.table", "DBI", "DT", "e1071", "exactRankTests", "expint", "fansi", "farver", "flextable", "ggfortify", "ggpubr", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "igraph", "ISOcodes", "jomo", "knitr", "latticeExtra", "leaflet", "maptools", "maxLik", "mice", "mime", "miscTools", "multcomp", "mvtnorm", "network", "officer", "openxlsx", "ordinal", "pillar", "plotmo", "plotrix", "plyr", "polspline", "prettyunits", "prodlim", "psych", "purrr", "quantreg", "R6", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "recipes", "reticulate", "rgdal", "rlang", "rmarkdown", "rms", "roxygen2", "RSpectra", "rticles", "Rttf2pt1", "rversions", "rvg", "scales", "selectr", "slam", "sna", "sp", "SparseM", "stringi", "testthat", "tidyverse", "tinytex", "tm", "tsibble", "vctrs", "webshot", "xaringan", "xfun", "zoo"))
Sys.setenv(LANGUAGE = "en")
df
wo
wo
我
的的
df
fbm <- function(hurst=0.7, n=100){
delta <- 1/n
r <- numeric(n+1)
r[1] <- 1
for(k in 1:n)
r[k+1] <- 0.5 * ((k+1)^(2*hurst) - 2*k^(2*hurst) + (k-1)^(2*hurst))
r <- c(r, r[seq(length(r)-1, 2)])
lambda <- Re((fft(r)) / (2*n))
W <- fft(sqrt(lambda) * (rnorm(2*n) + rnorm(2*n)*1i))
W <- n^(-hurst) * cumsum(Re(W[1:(n+1)]))
X <- ts(W, start=0, deltat=delta)
return(X)
}
fbm()
x =  fbm()
x
plot(x)
find_rtools(T)
library(installr)
find_rtools(T)
find_rtools( )
install.Rtools()
install.Rtools()
symbols <- readRDS("F:/carter/src-i386/symbols.rds")
symbols
dfdf
dfdfff
dfdf
df
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
dfdd
df
dfff
library(RCurl)
library(RJSONIO)
require(quantmod)
library(ggplot2)
# 提取武汉市2011年一年的历史数据
date<- seq.Date(from=as.Date('2011-01-01'),
to=as.Date('2011-12-31'), by='1 day')
date.range<- as.character(format(date,"%Y%m%d"))
n <- length(date.range)
temp <- humi <- rep(0,n)
for (i in 1:n) {
# 你要用自己申请的API key来代替程序中的yourkey
url <- 'http://api.wunderground.com/api/yourkey/'
finalurl <- paste(url,'history_',date.range[i],
'/q/wuhan.json',sep='')
web <- getURL(finalurl)
raw <-fromJSON(web)
temp[i] <- raw$history$dailysummary[[1]]$meantempm
humi[i] <- raw$history$dailysummary[[1]]$humidity
# 在循环内增加一个7秒的暂停，避免连接断开。
Sys.sleep(7)
}
# 将获得的数据整合为数据框，并将温度和湿度转为数值格式
dataset <- data.frame(temp,humi,date,stringsAsFactors=F)
dataset$temp <- as.numeric(dataset$temp)
dataset$humi <- as.numeric(dataset$humi)
# 用openair包绘制日历热图
install.packages('openair')
library(openair)
calendarPlot(dataset,pollutant='temp',year=2011)
# 用ggplot2包绘制日历热图
# 复制一个新的数据框
dat <- dataset
# 先取得月份，再转为因子格式
dat$month<-as.numeric(as.POSIXlt(dat$date)$mon+1)
dat$monthf<-factor(dat$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
# 得到每周的星期，也转为因子格式
dat$weekday = as.POSIXlt(dat$date)$wday
dat$weekdayf<-factor(dat$weekday,levels=rev(0:6),
labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
# 先得到全年的周序号，然后得到每个月的周序号
dat$week <- as.numeric(format(dat$date,"%W"))
dat<-ddply(dat,.(monthf),transform,monthweek=1+week-min(week))
# 绘图
P <- ggplot(dat, aes(monthweek, weekdayf, fill = temp)) +
geom_tile(colour='white') +
facet_wrap(~monthf ,nrow=3) +
scale_fill_gradient(space="Lab",limits=c(22, max(dat$value)),
low="red", high="yellow") +
opts(title = "武汉市2011年气温日历热图") +
xlab("Week of Month") + ylab("")
P
关于作者
library(RCurl)
library(RJSONIO)
require(quantmod)
library(ggplot2)
install.packages('quantmod')
install.packages('RJSONIO')
library(ggplot2)
library(ggthemes)
library(data.table)
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2016-04-04"),
to = as.Date("2019-11-09"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
ggplot(rides, aes(x = week, y = weekdays, fill = N)) +
scale_fill_viridis_c(name = "Divvy Rides", option = "C", limits = c(0, max(rides$N))) +
geom_tile(color = "white", size = 0.4) +
facet_wrap("year", ncol = 1) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1, 52, length = 12), labels = month.abb) +
theme_tufte()
install.packages('ggthemes')
library(ggplot2)
library(ggthemes)
library(data.table)
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2016-04-04"),
to = as.Date("2019-11-09"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
ggplot(rides, aes(x = week, y = weekdays, fill = N)) +
scale_fill_viridis_c(name = "Divvy Rides", option = "C", limits = c(0, max(rides$N))) +
geom_tile(color = "white", size = 0.4) +
facet_wrap("year", ncol = 1) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1, 52, length = 12), labels = month.abb) +
theme_tufte()
rides <- data.frame(date = seq.Date(
from = as.Date("2020-01-01"),
to = as.Date("2021-01-01"), by = "day"
))
rides$year <- year(rides$date)
# 这个图和 Github 的打码图一样的
# 展示每日变化情况
library(ggplot2)
library(ggthemes)
library(data.table)
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2020-01-01"),
to = as.Date("2021-01-01"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
ggplot(rides, aes(x = week, y = weekdays, fill = N)) +
scale_fill_viridis_c(name = "Divvy Rides", option = "C", limits = c(0, max(rides$N))) +
geom_tile(color = "white", size = 0.4) +
facet_wrap("year", ncol = 1) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1, 52, length = 12), labels = month.abb) +
theme_tufte()
# 这个图和 Github 的打码图一样的
# 展示每日变化情况
library(ggplot2)
library(ggthemes)
library(data.table)
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2020-01-01"),
to = as.Date("2021-12-31"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
ggplot(rides, aes(x = week, y = weekdays, fill = N)) +
scale_fill_viridis_c(name = "Divvy Rides", option = "C", limits = c(0, max(rides$N))) +
geom_tile(color = "white", size = 0.4) +
facet_wrap("year", ncol = 1) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1, 52, length = 12), labels = month.abb) +
theme_tufte()
# 这个图和 Github 的打码图一样的
# 展示每日变化情况
library(ggplot2)
library(ggthemes)
library(data.table)
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2020-01-01"),
to = as.Date("2020-12-31"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
ggplot(rides, aes(x = week, y = weekdays, fill = N)) +
scale_fill_viridis_c(name = "Divvy Rides", option = "C", limits = c(0, max(rides$N))) +
geom_tile(color = "white", size = 0.4) +
facet_wrap("year", ncol = 1) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1, 52, length = 12), labels = month.abb) +
theme_tufte()
require(quantmod)
require(ggplot2)
require(reshape2)
require(plyr)
require(scales)
# Download some Data, e.g. the CBOE VIX
getSymbols("^VIX",src="yahoo")
# Make a dataframe
dat<-data.frame(date=index(VIX),VIX)
dat
dat$year<-as.numeric(as.POSIXlt(dat$date)$year+1900)
# the month too
dat$month<-as.numeric(as.POSIXlt(dat$date)$mon+1)
# but turn months into ordered facors to control the appearance/ordering in the presentation
dat$monthf<-factor(dat$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
# the day of week is again easily found
dat$weekday = as.POSIXlt(dat$date)$wday
# again turn into factors to control appearance/abbreviation and ordering
# I use the reverse function rev here to order the week top down in the graph
# you can cut it out to reverse week order
dat$weekdayf<-factor(dat$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE)
# the monthweek part is a bit trickier
# first a factor which cuts the data into month chunks
dat$yearmonth<-as.yearmon(dat$date)
dat$yearmonthf<-factor(dat$yearmonth)
# then find the "week of year" for each day
dat$week <- as.numeric(format(dat$date,"%W"))
# and now for each monthblock we normalize the week to start at 1
dat<-ddply(dat,.(yearmonthf),transform,monthweek=1+week-min(week))
# Now for the plot
P<- ggplot(dat, aes(monthweek, weekdayf, fill = VIX.Close)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="red", high="yellow") +
opts(title = "Time-Series Calendar Heatmap") +  xlab("Week of Month") + ylab("")
P<- ggplot(dat, aes(monthweek, weekdayf, fill = VIX.Close)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="red", high="yellow")
p
ggplot(dat, aes(monthweek, weekdayf, fill = VIX.Close)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="red", high="yellow")
week.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
month.abb <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
rides <- data.frame(date = seq.Date(
from = as.Date("2016-04-04"),
to = as.Date("2019-11-09"), by = "day"
))
rides$year <- year(rides$date)
rides$week <- week(rides$date)
rides$weekdays <- factor(wday(rides$date), labels = week.abb)
rides$N <- sample(1:40, dim(rides)[1], replace = TRUE)
rides
View(rides)
date<- seq.Date(from=as.Date('2011-01-01'),
to=as.Date('2011-12-31'), by='1 day')
date.range<- as.character(format(date,"%Y%m%d"))
n <- length(date.range)
temp <- humi <- rep(0,n)
for (i in 1:n) {
# 你要用自己申请的API key来代替程序中的yourkey
url <- 'http://api.wunderground.com/api/yourkey/'
finalurl <- paste(url,'history_',date.range[i],
'/q/wuhan.json',sep='')
web <- getURL(finalurl)
raw <-fromJSON(web)
temp[i] <- raw$history$dailysummary[[1]]$meantempm
humi[i] <- raw$history$dailysummary[[1]]$humidity
# 在循环内增加一个7秒的暂停，避免连接断开。
Sys.sleep(7)
}
# 将获得的数据整合为数据框，并将温度和湿度转为数值格式
dataset <- data.frame(temp,humi,date,stringsAsFactors=F)
dataset$temp <- as.numeric(dataset$temp)
dataset$humi <- as.numeric(dataset$humi)
dat <- dataset
# 先取得月份，再转为因子格式
dat$month<-as.numeric(as.POSIXlt(dat$date)$mon+1)
dat$monthf<-factor(dat$month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=TRUE)
# 得到每周的星期，也转为因子格式
dat$weekday = as.POSIXlt(dat$date)$wday
dat$weekdayf<-factor(dat$weekday,levels=rev(0:6),
labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)
# 先得到全年的周序号，然后得到每个月的周序号
dat$week <- as.numeric(format(dat$date,"%W"))
dat<-ddply(dat,.(monthf),transform,monthweek=1+week-min(week))
View(dat)
date<- seq.Date(from=as.Date('2020-01-01'),
to=as.Date('2020-12-31'), by='1 day')
date
?as.POSIXlt
80/15
100/20
setwd('F:/sec_site')
blogdown:::serve_site()
