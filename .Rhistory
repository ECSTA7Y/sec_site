shiny::runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
?selectInput
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
？textInput
?v
?textInput
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
?textInput
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
?verbatimTextOutput
runApp('E:/txtnb')
runApp('E:/txtnb')
?actionButton
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
# add an icon to a submit button
submitButton("Update View", icon = icon("refresh"))
navbarPage("App Title",
tabPanel("Plot", icon = icon("bar-chart-o")),
tabPanel("Summary", icon = icon("list-alt")),
tabPanel("Table", icon = icon("table"))
)
runApp('E:/txtnb')
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
library(shiny)
runApp(list(
ui = pageWithSidebar(
headerPanel("'Reset inputs' button example"),
sidebarPanel(
uiOutput('resetable_input'),
tags$hr(),
actionButton("reset_input", "Reset inputs")
),
mainPanel(
h4("Summary"),
verbatimTextOutput("summary")
)
),
server = function(input, output, session) {
output$summary <- renderText({
return(paste(input$mytext, input$mynumber))
})
output$resetable_input <- renderUI({
times <- input$reset_input
div(id=letters[(times %% length(letters)) + 1],
numericInput("mynumber", "Enter a number", 20),
textInput("mytext", "Enter a text", "test"))
})
}
))
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp()
runApp()
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
library(shiny)
runApp(list(
ui = pageWithSidebar(
headerPanel("'Reset inputs' button example"),
sidebarPanel(
shinyjs::useShinyjs(),
id = "side-panel",
numericInput("mynumber", "Enter a number", 20),
textInput("mytext", "Enter a text", "test"),
tags$hr(),
actionButton("reset_input", "Reset inputs")
),
mainPanel(
h4("Summary"),
verbatimTextOutput("summary")
)
),
server = function(input, output, session) {
output$summary <- renderText({
return(paste(input$mytext, input$mynumber))
})
observeEvent(input$reset_input, {
shinyjs::reset("side-panel")
})
}
))
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
sidebarLayout(
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
install.packages('rsconnect')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
?actionButton
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
runApp('E:/txtnb')
runApp()
runApp()
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
library(shinyWidgets)
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Awesome action button"),
tags$br(),
actionBttn(
inputId = "bttn1",
label = "Go!",
color = "primary",
style = "bordered"
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn1"),
tags$br(),
actionBttn(
inputId = "bttn2",
label = "Go!",
color = "success",
style = "material-flat",
icon = icon("sliders"),
block = TRUE
),
tags$br(),
verbatimTextOutput(outputId = "res_bttn2")
)
server <- function(input, output, session) {
output$res_bttn1 <- renderPrint(input$bttn1)
output$res_bttn2 <- renderPrint(input$bttn2)
}
shinyApp(ui = ui, server = server)
}
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp()
runApp()
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp()
runApp('E:/txtnb')
runApp('E:/txtnb')
train <- readRDS("E:/txtnb/train.rds")
View(train)
train2 <- readRDS("F:/Mysite/static/archives/Rbasic/train.rds")
train2
train2[1,]
as.data.frame(train2)
train = smsmat[1:2,]
train[1:2,]
train <- readRDS("F:/Mysite/static/archives/Rbasic/train.rds")
View(train)
runApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb')
svmc <- readRDS("E:/txtnb_en/svmc.rds")
View(svmc)
svmc[["nSV"]]
svmc[["coefs"]]
rsconnect::setAccountInfo(name='xiaosong', token='17971C717408DF9026AB0FC0E7862C10', secret='wJBsG75+P+JETZJYwZ/VPXtWM4h6W1TIiGcA8Avp')
library(rsconnect)
rsconnect::deployApp('E:/txtnb')
warnings()
runApp('E:/txtnb')
library(rsconnect)
deployApp('E:/txtnb')
runApp('E:/txtnb')
runApp('E:/txtnb2')
runApp('E:/txtnb2')
setwd('C:/Users/xsong/Desktop/table')
library(shiny)
runGitHub( "txtnb_en", "ECSTA7Y")
library(shiny)
runGitHub( "txtnb", "ECSTA7Y")
library(shiny)
runGitHub( "txtnb", "ECSTA7Y")
160*8
?poisson.test
data <- rpois(n = 100, 20)
mean <- mean(data)
poisson.test(sum(data), length(data), mean)
mean
?tibble
library(dplyr)
?tibble
library(stringr)
txturl = ''
for (i in 1:20){
c = 'https://d.cosx.org/all?page='
url = str_c(c,i,sep='')
Sys.sleep(15) # 避免被反爬虫，每次循环暂停15秒
getext = get_text(url,'a')
txturl = c(txturl,getext)
}
knitr::opts_chunk$set(comment=NA,error=T,message=F,warning=F,fig.align='center',out.width='90%')
library(rvest)
library(magrittr)
library(xml2)
library(selectr)#解析器,少了这个包，后面会报错
library(stringr)
get_text <- function(url,w){ # 读取特定html节点的函数
text <- url %>%
read_html() %>%
html_nodes(.,w) %>%
html_text()
return(text)
}
# 测试
#get_text("https://xsong.ltd/zh/pybasic/",'h1')
library(stringr)
txturl = ''
for (i in 1:20){
c = 'https://d.cosx.org/all?page='
url = str_c(c,i,sep='')
Sys.sleep(15) # 避免被反爬虫，每次循环暂停15秒
getext = get_text(url,'a')
txturl = c(txturl,getext)
}
long <- readRDS("C:/Users/xsong/Desktop/table/long.rds")
View(long)
load("F:/Mysite/static/archives/Rbasic/rvestwork_cache/html/unnamed-chunk-3_9a4f1e8a17b47d2ccfde17fd824e38e7.RData")
load("F:/Mysite/static/archives/Rbasic/rvestwork_cache/html/unnamed-chunk-3_9a4f1e8a17b47d2ccfde17fd824e38e7.RData")
cosdf <- readRDS("C:/Users/xsong/Desktop/table/cosdf.rds")
View(cosdf)
svlong <- readRDS("C:/Users/xsong/Desktop/table/svlong.rds")
View(svlong)
test.possion
possion
poisson.test(sum(svlong), length(svlong), mean(svlong))
View(svlong)
poisson.test(sum(svlong$long), length(svlong$long), mean(svlong$long))
svlong %$%
poisson.test(sum(long), length(long), mean(long))
library(magrittr)
svlong %$%
poisson.test(sum(long), length(long), mean(long))
212-88
reuters_zip <- "reuters.zip"
download.file("https://github.com/nltk/nltk_data/raw/gh-pages/packages/corpora/reuters.zip", reuters_zip)
unzip(reuters_zip)
reuters <- c(list.files("reuters/training/", full.names = TRUE), list.files("reuters/test/", full.names = TRUE))
k <- length(reuters)
title <- rep(NA, k)
for (i in 1:k) title[i] <- readLines(reuters[i], n = 1)
title <- gsub(" &lt.*?>", "", title)
len <- sapply(strsplit(title, " "), length)
fit1 <- MASS::fitdistr(len, "poisson")
hist(len, freq = FALSE, breaks = 50)
lines(density(len, bw = 1), col = "red")
curve(dnorm(x, fit1$estimate, sqrt(fit1$estimate)), col = "blue", add = TRUE)
library("fitdistrplus")
fit2 <- fitdist(len, "pois")
summary(fit2)
gofstat(fit2)
plot(fit2)
str(1)
str('LI LULU')
?str
wwb = c('w',1,'4')
wwb
str(wwb)
?list
require(graphics)
# create a plotting structure
pts <- list(x = cars[,1], y = cars[,2])
plot(pts)
pts
str(pts)
class(pts)
is.atomic(pts)
is.list(pts)
co = c(NA,1,2,4,'gfff')
co
is.na(co)
is.atomic(co)
is.numeric(co)
er = c(T,F,T,F,F)
as.numeric(er)
er
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
x
View(x)
x[[1]]
x <- list(list(list(list())))
str(x)
is.recursive(x)
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(x)
View(x)
y <- 1:10
y
str(y)
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
f <- function(x = ls()) {
a <- 1
x
}
f
f()
f(ls())
plot(1:5, col = "red")
plot(1:5, cex = 5, pch = 20)
plot(1:5, bty = "u")
plot(1:5, labels = FALSE)
sum(1, 2, NA, na.mr = TRUE)
?sum
1
sum(1, 2, NA, na.mr = TRUE)
`%+%`
?`%>%`
library(magrittr)
?`%>%`
`%>%`
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default value
setwd('F:/sec_site')
blogdown:::serve_site()
blogdown:::serve_site()
